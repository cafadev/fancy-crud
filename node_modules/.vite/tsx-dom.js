import {
  __commonJS
} from "./chunk-Z47AEMLX.js";

// node_modules/tsx-dom/dist/index.js
var require_dist = __commonJS({
  "node_modules/tsx-dom/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.h = void 0;
    function applyChild(element, child) {
      if (child instanceof HTMLElement)
        element.appendChild(child);
      else if (typeof child === "string" || typeof child === "number")
        element.appendChild(document.createTextNode(child.toString()));
      else
        console.warn("Unknown type to append: ", child);
    }
    function applyChildren(element, children) {
      for (const child of children) {
        if (!child && child !== 0)
          continue;
        if (Array.isArray(child))
          applyChildren(element, child);
        else
          applyChild(element, child);
      }
    }
    function transferKnownProperties(source, target) {
      for (const key of Object.keys(source)) {
        if (Object.prototype.hasOwnProperty.call(target, key))
          target[key] = source[key];
      }
    }
    function h(tag, attrs, ...children) {
      if (typeof tag === "function")
        return tag(Object.assign(Object.assign({}, attrs), { children }));
      const element = document.createElement(tag);
      if (attrs) {
        if (attrs.style && typeof attrs.style !== "string") {
          transferKnownProperties(attrs.style, element.style);
          delete attrs.style;
        }
        for (const name of Object.keys(attrs)) {
          const value = attrs[name];
          if (name.startsWith("on")) {
            const finalName = name.replace(/Capture$/, "");
            const useCapture = name !== finalName;
            const eventName = finalName.toLowerCase().substring(2);
            element.addEventListener(eventName, value, useCapture);
          } else if (value === true)
            element.setAttribute(name, name);
          else if (value || value === 0)
            element.setAttribute(name, value.toString());
        }
      }
      applyChildren(element, children);
      return element;
    }
    exports.h = h;
  }
});

// dep:tsx-dom
var tsx_dom_default = require_dist();
export {
  tsx_dom_default as default
};
//# sourceMappingURL=tsx-dom.js.map
